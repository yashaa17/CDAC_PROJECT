package com.bookmydriver.config;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;

@EnableWebSecurity
@Configuration
public class SecurityConfig {


	 private final JwtFilter jwtAuthenticationFilter;


	public SecurityConfig(JwtFilter jwtAuthenticationFilter) {
		// TODO Auto-generated constructor stub
//		this.userRepository = userRepository;
		this.jwtAuthenticationFilter = jwtAuthenticationFilter;
//		this.userDetails = userDetails;
	}


	@Autowired
	private AuthenticationProvider authenticationProvider;

	@Bean
	SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {


		httpSecurity.cors(Customizer.withDefaults())
		.csrf().disable()
		.authorizeHttpRequests()
		.antMatchers("/auth/**","/swagger-ui/**","/v*/api-doc*//").permitAll()
		.anyRequest()
		.authenticated()
		.and()
		.authenticationProvider(authenticationProvider)
		.addFilterBefore(jwtAuthenticationFilter, BasicAuthenticationFilter.class);

		return httpSecurity.build();

	}

	@Bean
	CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration configuration = new CorsConfiguration();
		configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
		configuration.setAllowedMethods(Arrays.asList("GET","POST"));
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", configuration);
		return source;
	}


//	private CorsConfigurationSource corsConfigurationSource() {
//
//	}

//	@Override
//    public void addCorsMappings(CorsRegistry registry) {
//        registry.addMapping("/**") // Allow CORS for all endpoints
//                .allowedOrigins("http://localhost:3000") // Allow requests from this origin
//                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // Allow these HTTP methods
//                .allowedHeaders("*") // Allow all headers
//                .allowCredentials(true); // Allow credentials (cookies, authorization headers, etc.)
//    }



}
